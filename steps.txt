SETTING UP FRONTEND PART

install vite using the command -> npm insall vite@latest
create project name
select frame work react
select variant, javascript
navigate to the frontend directory
install node modules using -> npm install
install react router dom for routing and toastify to display toast notification-> npm install react-router-dom react toastify
now we run the project on localhost -> npm run dev
navigate to frontend/src/assets then delete the app.css file
installing tailwind css, search vite + tailwind on the browser and follow the installation process
navigate to frontend/src and create a folder=> pages and another folder => components, and another folder=> context to handle all the logics in the ecommerce
on the pages folder, create all files for each pages of the project.
navigate to the main.jsx file, edit the StrictMode to BrowserRouter and import it from the react-router-dom
navigate to the app.jsx file, add and import all the required routes needed in the project
create a Navbar.jsx in the components folder, this file is responsible for the navigations across pages
create an object for the assets in the asset/assets.js file

for the rest of the projects create the necessary components and logics.



SETTING UP BACKEND

create a file in backend folder, server.js.
on the terminal, c:\ecommerce-mern\backend, run the command ->npm init. To install the package.json file. 
While installing, always use enter key to select the default value.

install dependencies still on the current path c:\ecommerce-mern\backend
run the command=> npm i cors dotenv express jsonwebtoken mongoose multer nodemon razorpay stripe validator cloudinary bcrypt 

----REASON:
installing cors to allow the frontend ip to access the backend
installing dotenv so environment variables can be used in the project
installing express package for api
jsonwebtoken to enable user authentication, login & signup
mongoose for database connectivity
multer to allow image storage on cloudinary
nodemon to restart the backend when changes are made in the code
razorpay and stripe to set up online payment integration
validator to check if the data coming from the user is valid or not
bcrypt to encrypt user password and store in database

